<?xml version="1.0" encoding="UTF-8"?>
<!DOCTYPE mapper PUBLIC "-//mybatis.org//DTD Mapper 3.0//EN" "http://mybatis.org/dtd/mybatis-3-mapper.dtd">
<mapper namespace="com.english.english_vision.mapper.CommentMapper">
  <resultMap id="BaseResultMap" type="com.english.english_vision.pojo.Comment">
    <id column="id" jdbcType="INTEGER" property="id" />
    <result column="user_id" jdbcType="INTEGER" property="userId" />
    <result column="avatar" jdbcType="VARCHAR" property="avatar" />
    <result column="content" jdbcType="VARCHAR" property="content" />
    <result column="parent_id" javaType="INTEGER" property="parentId"></result>
    <result column="reply_id" property="replyId"/>
    <result column="create_time" jdbcType="TIMESTAMP" property="createTime" />
    <result column="blog_id" jdbcType="INTEGER" property="blogId" />
  </resultMap>
  <sql id="Base_Column_List">
    id, user_id, avatar, content, create_time, blog_id,reply_id,parent_id
  </sql>
  <select id="selectByPrimaryKey" parameterType="java.lang.Integer" resultMap="BaseResultMap">
    select 
    <include refid="Base_Column_List" />
    from t_comment
    where id = #{id,jdbcType=INTEGER}
  </select>
    <select id="selectAll" resultType="com.english.english_vision.pojo.Comment">
select * from t_comment

    </select>
  <select id="selectByUser" resultType="com.english.english_vision.pojo.Comment">

select * from t_comment where user_id = #{id}
  </select>
    <select id="listComments" resultType="com.english.english_vision.pojo.Comment">
      select * from t_comment where  <if test="articleId != null"> blog_id = #{articleId}</if>
<if test="articleId == null">blog_id is null</if>
LIMIT #{pageNum},#{pageSize}

    </select>
  <select id="listReplies" resultType="com.english.english_vision.vo.ReplyVo">
    SELECT     c.user_id,     u.user_name, r.avatar,c.reply_id,r.user_name AS from_user,  c.id,
           c.parent_id,     c.content,     c.create_time FROM  t_comment c
               JOIN t_user u ON c.user_id = u.id     JOIN t_user r ON c.reply_id = r.id
    WHERE parent_id IN
          ( <foreach collection="commentIdList" item="commentId" separator=",">
    #{commentId}
  </foreach>)

  </select>
    <select id="listReplyCountByCommentId" resultType="com.english.english_vision.pojo.ReplyCountDTO">
select parent_id as comment_id,
       count(1) as reply_count
from t_comment
where parent_id in
(
    <foreach collection="commentIdList" item ="commentId" separator=",">
      #{commentId}
    </foreach>
  )
group by parent_id
    </select>
  <select id="listRepliesByCommentId" resultType="com.english.english_vision.pojo.ReplyDTO">

    SELECT
      c.user_id,
      u.user_name,
      u.avatar,

      c.reply_id,
      r.user_name as reply_username,

      c.id,
      c.parent_id,
      c.content,
      c.create_time
    FROM
      t_comment c
        JOIN t_user u ON c.user_id = u.id
        JOIN t_user r ON c.reply_id = r.id
    WHERE
      parent_id =#{commentId}
    ORDER BY
      c.id ASC
      LIMIT #{current}, #{size}
  </select>
  <delete id="deleteByPrimaryKey" parameterType="java.lang.Integer">
    delete from t_comment
    where id = #{id,jdbcType=INTEGER}
  </delete>
  <insert id="insert" parameterType="com.english.english_vision.pojo.Comment">
    insert into t_comment (id, user_id, avatar, 
      content, create_time, blog_id
      )
    values (#{id,jdbcType=INTEGER}, #{userId,jdbcType=INTEGER}, #{avatar,jdbcType=VARCHAR}, 
      #{content,jdbcType=VARCHAR}, #{createTime,jdbcType=TIMESTAMP}, #{blogId,jdbcType=BIGINT}
      )
  </insert>
  <insert id="insertSelective" parameterType="com.english.english_vision.pojo.Comment">
    insert into t_comment
    <trim prefix="(" suffix=")" suffixOverrides=",">
      <if test="id != null">
        id,
      </if>
      <if test="userId != null">
        user_id,
      </if>
      <if test="avatar != null">
        avatar,
      </if>
      <if test="content != null">
        content,
      </if>
      <if test="createTime != null">
        create_time,
      </if>
      <if test="blogId != null">
        blog_id,
      </if>
    </trim>
    <trim prefix="values (" suffix=")" suffixOverrides=",">
      <if test="id != null">
        #{id,jdbcType=INTEGER},
      </if>
      <if test="userId != null">
        #{userId,jdbcType=INTEGER},
      </if>
      <if test="avatar != null">
        #{avatar,jdbcType=VARCHAR},
      </if>
      <if test="content != null">
        #{content,jdbcType=VARCHAR},
      </if>
      <if test="createTime != null">
        #{createTime,jdbcType=TIMESTAMP},
      </if>
      <if test="blogId != null">
        #{blogId,jdbcType=BIGINT},
      </if>
    </trim>
  </insert>
  <update id="updateByPrimaryKeySelective" parameterType="com.english.english_vision.pojo.Comment">
    update t_comment
    <set>
      <if test="userId != null">
        user_id = #{userId,jdbcType=INTEGER},
      </if>
      <if test="avatar != null">
        avatar = #{avatar,jdbcType=VARCHAR},
      </if>
      <if test="content != null">
        content = #{content,jdbcType=VARCHAR},
      </if>
      <if test="createTime != null">
        create_time = #{createTime,jdbcType=TIMESTAMP},
      </if>
      <if test="blogId != null">
        blog_id = #{blogId,jdbcType=BIGINT},
      </if>
    </set>
    where id = #{id,jdbcType=INTEGER}
  </update>
  <update id="updateByPrimaryKey" parameterType="com.english.english_vision.pojo.Comment">
    update t_comment
    set user_id = #{userId,jdbcType=INTEGER},
      avatar = #{avatar,jdbcType=VARCHAR},
      content = #{content,jdbcType=VARCHAR},
      create_time = #{createTime,jdbcType=TIMESTAMP},
      blog_id = #{blogId,jdbcType=BIGINT}
    where id = #{id,jdbcType=INTEGER}
  </update>
</mapper>